{"version":3,"file":"static/js/775.47b8dd42.chunk.js","mappings":"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","sources":["Pages/Contacts/Contacts.jsx","Pages/Contacts/ContactsList/ContactsList.jsx","Pages/Contacts/Filter/Filter.jsx","Pages/Contacts/Form/Form.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { VisuallyHidden, VisuallyHiddenInput } from '@chakra-ui/react';\nconst { ContactsList } = require('./ContactsList/ContactsList');\nconst { FilterBar } = require('./Filter/Filter');\nconst { Form } = require('./Form/Form');\n\nconst Main = styled.main`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\nposition: relative\n}`;\nconst Contacts = () => {\n  return (\n    <Main className=\"contacts-hero\">\n      <Form />\n      {/* <VisuallyHidden> */}\n      <FilterBar />\n      <ContactsList />\n      {/* </VisuallyHidden> */}\n    </Main>\n  );\n};\n\nexport default Contacts;\n\n{\n  /* <div className=\"Phonebook-container\">\n        <h1 className=\"Phonebook__title\">Phonebook</h1>\n        <Form />\n        <FilterBar />\n        <ContactsList />\n        )}\n      </div> */\n}\n","import './ContactsList.css';\nimport PropTypes from 'prop-types';\n//? redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { deleteContactAPI, fetchContactsAPI } from 'redux/operations';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  // update contacts\n  useEffect(() => {\n    dispatch(fetchContactsAPI());\n    // dispatch in hook dependency will update contacts-list\n  }, [dispatch]);\n\n  const handleDelete = id => dispatch(deleteContactAPI(id));\n  const filter = useSelector(getFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <div className=\"Contacts-list-container\">\n      <h1>Contacts</h1>\n\n      <ul className=\"Contacts-list\">\n        {filteredContacts.map(({ name, id, phone }) => {\n          return (\n            <li key={id}>\n              <div className=\"contacts__name\">\n                <p>{name}</p>\n              </div>\n              <div className=\"contacts__number\">\n                <p>{phone}</p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"Contacts__delete-button\"\n                onClick={() => {\n                  handleDelete(id);\n                }}\n              >\n                Delete contact\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.array,\n  onDeleteContact: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport './Filter.css';\n//? redux\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nexport const FilterBar = () => {\n  const dispatch = useDispatch();\n  const handleChangeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <h3>Find your contacts by name</h3>\n      <div className=\"filter-container\">\n        <input\n          type=\"text\"\n          name=\"filter\"\n          className=\"filter__input\"\n          onChange={handleChangeFilter}\n        />\n      </div>\n    </>\n  );\n};\n\nFilterBar.propTypes = {\n  handleChange: PropTypes.func,\n};\n","import './Form.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContactAPI } from 'redux/operations';\nimport styled from 'styled-components';\nimport './AddContact.css';\nconst {\n  Button,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  FormControl,\n  FormLabel,\n  Input,\n  ModalFooter,\n} = require('@chakra-ui/react');\nconst { useRef } = require('react');\nconst AddContactContainer = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  color: black;\n`;\n\nexport const Form = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const initialRef = useRef(null);\n  const finalRef = useRef(null);\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [surname, setSurname] = useState('');\n  const [phone, setNumber] = useState('');\n\n  const handleChange = e => {\n    const stateName = e.currentTarget.name;\n    const stateValue = e.currentTarget.value;\n\n    switch (stateName) {\n      case 'name':\n        setName(stateValue);\n        break;\n\n      case 'phone':\n        setNumber(stateValue);\n        break;\n\n      case 'surname':\n        setSurname(stateValue);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements.name.value;\n    const surname = form.elements.surname.value;\n    const phone = form.elements.phone.value;\n    const contact = { name, surname, phone };\n    console.log(contact);\n\n    dispatch(addContactAPI(contact));\n\n    reset();\n    onClose();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <AddContactContainer>\n      <Button\n        onClick={onOpen}\n        fontSize={36}\n        borderRadius={'45%'}\n        color={'black'}\n      >\n        +\n      </Button>\n\n      <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <form autoComplete=\"off\" onSubmit={handleSubmit}>\n          <ModalContent>\n            <ModalHeader>Add to contacts</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody pb={6}>\n              <FormControl isRequired>\n                <FormLabel htmlFor={'name'}>First name</FormLabel>\n                <Input\n                  name={'name'}\n                  ref={initialRef}\n                  placeholder=\"First name\"\n                />\n              </FormControl>\n\n              <FormControl mt={4}>\n                <FormLabel htmlFor={'surname'}>Surname</FormLabel>\n                <Input\n                  name={'surname'}\n                  ref={initialRef}\n                  placeholder=\"Surname\"\n                />\n              </FormControl>\n\n              <FormControl mt={4} isRequired>\n                <FormLabel htmlFor={'phone'}>Phone number</FormLabel>\n                <Input name={'phone'} placeholder=\"Last name\" />\n              </FormControl>\n            </ModalBody>\n\n            <ModalFooter justifyContent={'center'}>\n              <Button colorScheme=\"blue\" mr={3} w={150} type=\"submit\">\n                Add\n              </Button>\n            </ModalFooter>\n          </ModalContent>\n        </form>\n      </Modal>\n    </AddContactContainer>\n  );\n};\n\nForm.propTypes = {\n  name: PropTypes.string,\n  phone: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n\n{\n  /* <form\n        autoComplete=\"off\"\n        className=\"Phonebook__form\"\n        onSubmit={handleSubmit}\n      >\n        <label htmlFor=\"name\">\n          Name <br />\n          <input\n            type=\"text\"\n            name=\"name\"\n            className=\"Phonebook__form-input\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"phone\">\n          Number <br />\n          <input\n            type=\"tel\"\n            name=\"phone\"\n            className=\"Phonebook__form-input\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={phone}\n            onChange={handleChange}\n          />\n        </label>\n        {!isLoading ? (\n          <Button\n            width={250}\n            borderRadius={20}\n            colorScheme=\"teal\"\n            variant=\"outline\"\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        ) : (\n          <Button\n            width={250}\n            borderRadius={20}\n            isLoading\n            loadingText=\"Sending\"\n            colorScheme=\"teal\"\n            variant=\"outline\"\n            spinnerPlacement=\"start\"\n          ></Button>\n        )}\n      </form> */\n}\n"],"names":["ContactsList","require","FilterBar","Form","Main","styled","className","dispatch","useDispatch","contacts","useSelector","getContacts","useEffect","fetchContactsAPI","filter","getFilter","filteredContacts","contact","name","toLowerCase","includes","map","id","phone","type","onClick","deleteContactAPI","handleDelete","onChange","e","setFilter","target","value","Button","useDisclosure","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","FormControl","FormLabel","Input","ModalFooter","useRef","AddContactContainer","isOpen","onOpen","onClose","initialRef","finalRef","useState","setName","setNumber","reset","fontSize","borderRadius","color","initialFocusRef","finalFocusRef","autoComplete","onSubmit","preventDefault","form","elements","surname","console","log","addContactAPI","pb","isRequired","htmlFor","ref","placeholder","mt","justifyContent","colorScheme","mr","w"],"sourceRoot":""}