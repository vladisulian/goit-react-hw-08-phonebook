{"version":3,"file":"static/js/775.5d2540bd.chunk.js","mappings":"0JAAQA,EAAiBC,EAAQ,KAAzBD,aACAE,EAAcD,EAAQ,KAAtBC,UACAC,EAASF,EAAQ,IAAjBE,KAYR,UAViB,WACf,OACE,iCACE,SAACA,EAAD,KACA,SAACD,EAAD,KACA,SAACF,EAAD,MAGL,C,yHCJYA,EAAe,WAC1B,IAAMI,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,KAG7BC,EAAAA,EAAAA,YAAU,WACRL,GAASM,EAAAA,EAAAA,MAEV,GAAE,CAACN,IAEJ,IACMO,GAASJ,EAAAA,EAAAA,IAAYK,EAAAA,IAErBC,EAAmBP,EAASK,QAAO,SAAAG,GAAO,OAC9CA,EAAQC,KAAKC,cAAcC,SAASN,EAAOK,cADG,IAIhD,OACE,iBAAKE,UAAU,0BAAf,WACE,sCAEA,eAAIA,UAAU,gBAAd,SACGL,EAAiBM,KAAI,YAA0B,IAAvBJ,EAAsB,EAAtBA,KAAMK,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjC,OACE,2BACE,gBAAKH,UAAU,iBAAf,UACE,uBAAIH,OAEN,gBAAKG,UAAU,mBAAf,UACE,uBAAIG,OAEN,mBACEC,KAAK,SACLJ,UAAU,0BACVK,QAAS,YAxBF,SAAAH,GAAMhB,GAASoB,EAAAA,EAAAA,IAAiBJ,GAA9B,CAyBPK,CAAaL,EACd,EALH,8BAPOA,EAkBZ,QAIR,C,oGChDYlB,EAAY,WACvB,IAAME,GAAWC,EAAAA,EAAAA,MAKjB,OACE,iCACE,wDACA,gBAAKa,UAAU,mBAAf,UACE,kBACEI,KAAK,OACLP,KAAK,SACLG,UAAU,gBACVQ,SAZmB,SAAAC,GACzBvB,GAASwB,EAAAA,EAAAA,GAAUD,EAAEE,OAAOC,OAC7B,QAeF,C,gHCjBY3B,EAAO,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwB0B,EAAAA,EAAAA,UAAS,IAAjC,eAAOhB,EAAP,KAAaiB,EAAb,KACA,GAA2BD,EAAAA,EAAAA,UAAS,IAApC,eAAOV,EAAP,KAAcY,EAAd,KAEMC,EAAe,SAAAP,GACnB,IAAMQ,EAAYR,EAAES,cAAcrB,KAC5BsB,EAAaV,EAAES,cAAcN,MAEnC,OAAQK,GACN,IAAK,OACHH,EAAQK,GACR,MAEF,IAAK,QACHJ,EAAUI,GACV,MAEF,QACE,OAEL,EAcKC,EAAQ,WACZN,EAAQ,IACRC,EAAU,GACX,EAED,OACE,+BACE,kBACEM,aAAa,MACbrB,UAAU,4BACVsB,SAtBe,SAAAb,GACnBA,EAAEc,iBACF,IAAMC,EAAOf,EAAEE,OAGTf,EAAU,CAAEC,KAFL2B,EAAKC,SAAS5B,KAAKe,MAERT,MADVqB,EAAKC,SAAStB,MAAMS,OAGlC1B,GAASwC,EAAAA,EAAAA,IAAc9B,IAEvBwB,GACD,EASG,WAKE,mBAAOO,QAAQ,OAAf,mBACO,mBACL,kBACEvB,KAAK,OACLP,KAAK,OACLG,UAAU,wBACV4B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRlB,MAAOf,EACPW,SAAUQ,QAGd,mBAAOW,QAAQ,QAAf,qBACS,mBACP,kBACEvB,KAAK,MACLP,KAAK,QACLG,UAAU,wBACV4B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRlB,MAAOT,EACPK,SAAUQ,QAGd,mBAAQZ,KAAK,SAASJ,UAAU,gCAAhC,6BAMP,C","sources":["Pages/Contacts/Contacts.jsx","Pages/Contacts/ContactsList/ContactsList.jsx","Pages/Contacts/Filter/Filter.jsx","Pages/Contacts/Form/Form.jsx"],"sourcesContent":["const { ContactsList } = require('./ContactsList/ContactsList');\nconst { FilterBar } = require('./Filter/Filter');\nconst { Form } = require('./Form/Form');\n\nconst Contacts = () => {\n  return (\n    <>\n      <Form />\n      <FilterBar />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default Contacts;\n\n {/* <div className=\"Phonebook-container\">\n        <h1 className=\"Phonebook__title\">Phonebook</h1>\n        <Form />\n        <FilterBar />\n        <ContactsList />\n        )}\n      </div> */}\n      \n   ","import './ContactsList.css';\nimport PropTypes from 'prop-types';\n//? redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { deleteContactAPI, fetchContactsAPI } from 'redux/operations';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  // update contacts\n  useEffect(() => {\n    dispatch(fetchContactsAPI());\n    // dispatch in hook dependency will update contacts-list\n  }, [dispatch]);\n\n  const handleDelete = id => dispatch(deleteContactAPI(id));\n  const filter = useSelector(getFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <div className=\"Contacts-list-container\">\n      <h1>Contacts</h1>\n\n      <ul className=\"Contacts-list\">\n        {filteredContacts.map(({ name, id, phone }) => {\n          return (\n            <li key={id}>\n              <div className=\"contacts__name\">\n                <p>{name}</p>\n              </div>\n              <div className=\"contacts__number\">\n                <p>{phone}</p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"Contacts__delete-button\"\n                onClick={() => {\n                  handleDelete(id);\n                }}\n              >\n                Delete contact\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.array,\n  onDeleteContact: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport './Filter.css';\n//? redux\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nexport const FilterBar = () => {\n  const dispatch = useDispatch();\n  const handleChangeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <h3>Find your contacts by name</h3>\n      <div className=\"filter-container\">\n        <input\n          type=\"text\"\n          name=\"filter\"\n          className=\"filter__input\"\n          onChange={handleChangeFilter}\n        />\n      </div>\n    </>\n  );\n};\n\nFilterBar.propTypes = {\n  handleChange: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Form.css';\nimport { useState } from 'react';\n//? redux\nimport { useDispatch } from 'react-redux';\nimport { addContactAPI } from 'redux/operations';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [phone, setNumber] = useState('');\n\n  const handleChange = e => {\n    const stateName = e.currentTarget.name;\n    const stateValue = e.currentTarget.value;\n\n    switch (stateName) {\n      case 'name':\n        setName(stateValue);\n        break;\n\n      case 'phone':\n        setNumber(stateValue);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements.name.value;\n    const phone = form.elements.phone.value;\n    const contact = { name, phone };\n\n    dispatch(addContactAPI(contact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form\n        autoComplete=\"off\"\n        className=\"Phonebook__form-container\"\n        onSubmit={handleSubmit}\n      >\n        <label htmlFor=\"name\">\n          Name <br />\n          <input\n            type=\"text\"\n            name=\"name\"\n            className=\"Phonebook__form-input\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label htmlFor=\"phone\">\n          Number <br />\n          <input\n            type=\"tel\"\n            name=\"phone\"\n            className=\"Phonebook__form-input\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={phone}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className=\"Phonebook__form-submit-button\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nForm.propTypes = {\n  name: PropTypes.string,\n  phone: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n"],"names":["ContactsList","require","FilterBar","Form","dispatch","useDispatch","contacts","useSelector","getContacts","useEffect","fetchContactsAPI","filter","getFilter","filteredContacts","contact","name","toLowerCase","includes","className","map","id","phone","type","onClick","deleteContactAPI","handleDelete","onChange","e","setFilter","target","value","useState","setName","setNumber","handleChange","stateName","currentTarget","stateValue","reset","autoComplete","onSubmit","preventDefault","form","elements","addContactAPI","htmlFor","pattern","title","required"],"sourceRoot":""}